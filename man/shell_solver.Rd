% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shell_solver.R
\name{shell_solver}
\alias{shell_solver}
\title{Gateway to solver run from command line}
\usage{
shell_solver(
  cmd,
  value_file,
  gradient_file = NULL,
  value_read_fn = function(file) scan(file, quiet = TRUE),
  gradient_read_fn = if (!is.null(gradient_file)) value_read_fn,
  arg_combine_fn = function(x, precision) paste(c(x, precision), collapse = " "),
  wd = NULL,
  ignore.stdout = TRUE,
  ignore.stderr = TRUE,
  nparams = NULL
)
}
\arguments{
\item{cmd}{command to run the solver executable}

\item{value_file}{name of file containing the computed objective value, can
be absolute or relative to \code{wd}, cannot be \code{NULL}}

\item{gradient_file}{name of file containing the computed objective gradient,
can be absolute or relative to \code{wd}, \code{NULL} indicates that the solver does not
provide gradient info}

\item{value_read_fn}{function reading the objective value from file}

\item{gradient_read_fn}{function reading the objective gradient from file}

\item{arg_combine_fn}{function producing appropriate length-1 character vector from
point and precision for solver command line}

\item{wd}{character, working directory, i.e. directory where actual solver exec
has to be run, when \code{NULL} current working directory will be used}

\item{ignore.stdout}{logical, should solver STDOUT be ignored?}

\item{ignore.stderr}{logical, should solver STDERR be ignored?}

\item{nparams}{numeric, number of parameters, unspecified if \code{NULL}}
}
\value{
An object of classes \code{shell_solver} and \code{solver}
}
\description{
Gateway to simple external solver that is run from the command line
and stores objective value(s) and gradient (or jacobian)
in output text files.
}
\examples{
rscript_path <- file.path(R.home(), "bin", "Rscript")
solver_path <- file.path(find.package("solvergater"), "exec", "fake_simple.R")
solver_cmd <- paste(rscript_path, solver_path)
s <- shell_solver(solver_cmd, value_file = "output_value",
gradient_file = "output_gradient", wd = tempdir())
run(s, c(20, 5), 10)
}
